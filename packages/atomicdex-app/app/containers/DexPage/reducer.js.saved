    [LOAD_RECENT_SWAPS_COIN]: (state, { payload }) => {
      /**
      // NOTE: still not hanle this case
      // error: "swap never started"
      // uuid: ""
      // status: "finished"
      // bob: ""
      // src: ""
      // alice: ""
      // dest: ""
      // requestid: 1999249337
      // quoteid: 2452050470
      const {
        tradeid,
        uuid,
        requestid,
        quoteid,
        expiration,
        bob,
        alice,
        srcamount,
        destamount,
        sentflags,
        status,
        alicedexfee,
        bobdeposit,
        alicepayment,
        bobpayment,
        paymentspent,
        txChain
      } = payload;
      // stop when not found uuid
      if (!uuid && uuid === '') return state;
      // step one: update list
      let processingList = state.getIn(['swaps', 'processingList']);
      let finishedList = state.getIn(['swaps', 'finishedList']);

      // step two: update entities
      let entities = state.getIn(['swaps', 'entities']);
      let entity = entities.get(uuid);
      if (!entity) {
        // set new
        entity = fromJS({
          id: tradeid,
          uuid,
          requestid,
          quoteid,
          expiration,
          bob,
          alice,
          bobamount: srcamount,
          aliceamount: destamount,
          sentflags,
          status,
          myfee: {
            tx: SWAP_TX_DEFAULT,
            value: 0
          },
          bobdeposit: {
            tx: SWAP_TX_DEFAULT,
            value: 0
          },
          alicepayment: {
            tx: SWAP_TX_DEFAULT,
            value: 0
          },
          bobpayment: {
            tx: SWAP_TX_DEFAULT,
            value: 0
          },
          alicespend: {
            tx: SWAP_TX_DEFAULT,
            value: 0
          }
        });
      } else if (entity.get('status') === 'finished') {
        // NOTE: stop update when a swap was finished
        return state;
      } else {
        entity = entity.merge(
          fromJS({
            id: tradeid,
            uuid,
            requestid,
            quoteid,
            expiration,
            bob,
            alice,
            bobamount: srcamount,
            aliceamount: destamount,
            status
          })
        );
      }
      // sentflags
      const sentf = entity.get('sentflags');
      if (sentflags && sentf.size < sentflags.length) {
        entity = entity.set('sentflags', fromJS(sentflags));
      }

      if (
        alicedexfee !== SWAP_TX_DEFAULT &&
        alicedexfee !== entity.getIn(['myfee', 'tx'])
      ) {
        const d = txChain.find(e => e.stage === 'myfee');
        if (d) {
          entity = entity.set(
            'myfee',
            fromJS({
              coin: d.coin,
              tx: d.txid,
              value: d.amount
            })
          );
        }
      }

      if (
        bobdeposit !== SWAP_TX_DEFAULT &&
        bobdeposit !== entity.getIn(['bobdeposit', 'tx'])
      ) {
        const d = txChain.find(e => e.stage === 'bobdeposit');
        if (d) {
          entity = entity.set(
            'bobdeposit',
            fromJS({
              coin: d.coin,
              tx: d.txid,
              value: d.amount
            })
          );
        }
      }

      if (
        alicepayment !== SWAP_TX_DEFAULT &&
        alicepayment !== entity.getIn(['alicepayment', 'tx'])
      ) {
        const d = txChain.find(e => e.stage === 'alicepayment');
        if (d) {
          entity = entity.set(
            'alicepayment',
            fromJS({
              coin: d.coin,
              tx: d.txid,
              value: d.amount
            })
          );
        }
      }

      if (
        bobpayment !== SWAP_TX_DEFAULT &&
        bobpayment !== entity.getIn(['bobpayment', 'tx'])
      ) {
        const d = txChain.find(e => e.stage === 'bobpayment');
        if (d) {
          entity = entity.set(
            'bobpayment',
            fromJS({
              coin: d.coin,
              tx: d.txid,
              value: d.amount
            })
          );
        }
      }

      if (
        paymentspent !== SWAP_TX_DEFAULT &&
        paymentspent !== entity.getIn(['alicespend', 'tx'])
      ) {
        const d = txChain.find(e => e.stage === 'alicespend');
        if (d) {
          entity = entity.set(
            'alicespend',
            fromJS({
              coin: d.coin,
              tx: d.txid,
              value: d.amount
            })
          );
        }
      }

      entities = entities.set(uuid, entity);
      if (status === 'finished' && processingList.contains(uuid)) {
        processingList = processingList.filter(o => o !== uuid);
        finishedList = finishedList.push(uuid);

        return state
          .setIn(['swaps', 'processingList'], processingList)
          .setIn(['swaps', 'finishedList'], finishedList)
          .setIn(['swaps', 'entities'], entities);
      }
      return state.setIn(['swaps', 'entities'], entities);
      */
    },